{"version":3,"sources":["App.tsx","index.tsx"],"names":["App","useState","keyPressed","setKeyPressed","handleKeyDown","e","key","useEffect","document","addEventListener","removeEventListener","className","type","ReactDOM","render","getElementById"],"mappings":"sLAEaA,EAAgB,WAC3B,MAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAEMC,EAAgB,SAACC,GACrBF,EAAcE,EAAEC,MASlB,OANAC,qBAAU,WAGR,OAFAC,SAASC,iBAAiB,QAASL,GAE5B,kBAAMI,SAASE,oBAAoB,QAASN,MAClD,IAGD,sBAAKO,UAAU,MAAf,UAEE,uBAAOC,KAAK,OAAOD,UAAU,WAC7B,mBAAGA,UAAU,eAAb,SACGT,EAAU,kCACoBA,EADpB,KAEP,gC,MCjBZW,IAASC,OACP,cAAC,EAAD,IACAN,SAASO,eAAe,W","file":"static/js/main.16b5b9c0.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\n\nexport const App: React.FC = () => {\n  const [keyPressed, setKeyPressed] = useState('');\n\n  const handleKeyDown = (e: KeyboardEvent) => {\n    setKeyPressed(e.key);\n  };\n\n  useEffect(() => {\n    document.addEventListener('keyup', handleKeyDown);\n\n    return () => document.removeEventListener('keyup', handleKeyDown);\n  }, []);\n\n  return (\n    <div className=\"App\">\n      {/* Keep this input for tests */}\n      <input type=\"text\" className=\"hidden\" />\n      <p className=\"App__message\">\n        {keyPressed\n          ? `The last pressed key is[${keyPressed}]`\n          : 'Nothing was pressed yet'}\n      </p>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nimport './index.scss';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}